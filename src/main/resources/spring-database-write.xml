<?xml version="1.0" encoding="GBK"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <bean id="dataSourceWrite" class="com.alibaba.druid.pool.DruidDataSource">

        <!-- 基本属性 url、user、password -->
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${write1.url}"/>
        <property name="username" value="${write1.username}"/>
        <property name="password" value="${write1.password}"/>

        <!-- 初始化连接数量 -->
        <property name="initialSize" value="10" />

        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="3" />

        <!-- 最大并发连接数 -->
        <property name="maxActive" value="80" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="true" />

        <!-- 超过时间限制多长； -->
        <property name="removeAbandonedTimeout" value="180" />

        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
        <property name="validationQuery" value="SELECT 1 FROM DUAL" />

        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="true" />

        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="false" />

        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="false" />



        <property name="filters" value="stat,wall" />
    </bean>

    <!-- 动态数据源 -->
    <bean id="dataSource" class="com.hrg.databaseUtil.DynamicDataSource">
        <property name="targetDataSources">
            <map>
                <entry key="dataSourceWrite" value-ref="dataSourceWrite" />
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSourceWrite" />
    </bean>


    <!-- 配置事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 配置声明式事务：方法一，在Service实现类或者public实现方法上使用注解@Transactional，则此类或方法就会启用事务机制 -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- 使用mybatis配置sessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations">
            <value>classpath:/com/hrg/xmlmapper/write/*.xml</value>
        </property>
    </bean>

    <!-- 配置sessionTemplate -->
    <bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
        <!-- <constructor-arg index="1" value="BATCH" /> 如果想要进行批量操作可加入这个属性 -->
    </bean>

    <!-- mapper扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描包路径，如果需要扫描多个包，中间使用半角逗号隔开 -->
        <property name="basePackage" value="com.hrg.javamapper.write"></property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
</beans>